//
//  TrashCan.swift
//  RecipeDB
//
//  Created by PieterJanGeeroms on 31/12/2016.
//  Copyright Â© 2016 PJ Inc. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class TrashCan : NSObject {
    
    //// Drawing Methods
    
    public dynamic class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 416, height: 512), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 416, height: 512), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 416, y: resizedFrame.height / 512)
        
        
        //// Color Declarations
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        //// garbage.svg Group
        //// Group 2
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 199.32, y: 138.85, width: 17.35, height: 303.75), cornerRadius: 8.6)
        fillColor.setFill()
        rectanglePath.fill()
        
        
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 112.53, y: 138.85, width: 17.35, height: 303.75), cornerRadius: 8.6)
        fillColor.setFill()
        rectangle2Path.fill()
        
        
        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 286.12, y: 138.85, width: 17.35, height: 303.75), cornerRadius: 8.6)
        fillColor.setFill()
        rectangle3Path.fill()
        
        
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 407.59, y: 52.07))
        bezierPath.addLine(to: CGPoint(x: 285.72, y: 52.07))
        bezierPath.addCurve(to: CGPoint(x: 269.99, y: 11.19), controlPoint1: CGPoint(x: 284.77, y: 41.22), controlPoint2: CGPoint(x: 281.42, y: 22.93))
        bezierPath.addCurve(to: CGPoint(x: 242.7, y: 0), controlPoint1: CGPoint(x: 262.75, y: 3.77), controlPoint2: CGPoint(x: 253.57, y: 0))
        bezierPath.addLine(to: CGPoint(x: 155.93, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 128.65, y: 11.19), controlPoint1: CGPoint(x: 145.07, y: 0), controlPoint2: CGPoint(x: 135.89, y: 3.77))
        bezierPath.addCurve(to: CGPoint(x: 112.92, y: 52.07), controlPoint1: CGPoint(x: 117.21, y: 22.93), controlPoint2: CGPoint(x: 113.87, y: 41.22))
        bezierPath.addLine(to: CGPoint(x: 8.41, y: 52.07))
        bezierPath.addCurve(to: CGPoint(x: -0.27, y: 60.75), controlPoint1: CGPoint(x: 3.62, y: 52.07), controlPoint2: CGPoint(x: -0.27, y: 55.95))
        bezierPath.addCurve(to: CGPoint(x: 8.41, y: 69.42), controlPoint1: CGPoint(x: -0.27, y: 65.54), controlPoint2: CGPoint(x: 3.62, y: 69.42))
        bezierPath.addLine(to: CGPoint(x: 26.12, y: 69.42))
        bezierPath.addLine(to: CGPoint(x: 42.74, y: 468.79))
        bezierPath.addCurve(to: CGPoint(x: 85.33, y: 512), controlPoint1: CGPoint(x: 43.06, y: 483.74), controlPoint2: CGPoint(x: 52.36, y: 512))
        bezierPath.addLine(to: CGPoint(x: 330.67, y: 512))
        bezierPath.addCurve(to: CGPoint(x: 373.25, y: 468.97), controlPoint1: CGPoint(x: 363.64, y: 512), controlPoint2: CGPoint(x: 372.94, y: 483.74))
        bezierPath.addLine(to: CGPoint(x: 389.88, y: 69.42))
        bezierPath.addLine(to: CGPoint(x: 407.59, y: 69.42))
        bezierPath.addCurve(to: CGPoint(x: 416.27, y: 60.75), controlPoint1: CGPoint(x: 412.38, y: 69.42), controlPoint2: CGPoint(x: 416.27, y: 65.54))
        bezierPath.addCurve(to: CGPoint(x: 407.59, y: 52.07), controlPoint1: CGPoint(x: 416.27, y: 55.95), controlPoint2: CGPoint(x: 412.38, y: 52.07))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 141.11, y: 23.27))
        bezierPath.addCurve(to: CGPoint(x: 155.93, y: 17.36), controlPoint1: CGPoint(x: 145, y: 19.29), controlPoint2: CGPoint(x: 149.85, y: 17.36))
        bezierPath.addLine(to: CGPoint(x: 242.7, y: 17.36))
        bezierPath.addCurve(to: CGPoint(x: 257.53, y: 23.27), controlPoint1: CGPoint(x: 248.79, y: 17.36), controlPoint2: CGPoint(x: 253.64, y: 19.29))
        bezierPath.addCurve(to: CGPoint(x: 268.29, y: 52.07), controlPoint1: CGPoint(x: 264.51, y: 30.41), controlPoint2: CGPoint(x: 267.31, y: 42.97))
        bezierPath.addLine(to: CGPoint(x: 130.36, y: 52.07))
        bezierPath.addCurve(to: CGPoint(x: 141.11, y: 23.27), controlPoint1: CGPoint(x: 131.33, y: 42.97), controlPoint2: CGPoint(x: 134.13, y: 30.41))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 355.91, y: 468.43))
        bezierPath.addCurve(to: CGPoint(x: 330.67, y: 494.64), controlPoint1: CGPoint(x: 355.86, y: 471.11), controlPoint2: CGPoint(x: 354.66, y: 494.64))
        bezierPath.addLine(to: CGPoint(x: 85.33, y: 494.64))
        bezierPath.addCurve(to: CGPoint(x: 60.08, y: 468.25), controlPoint1: CGPoint(x: 61.6, y: 494.64), controlPoint2: CGPoint(x: 60.18, y: 471.07))
        bezierPath.addLine(to: CGPoint(x: 43.48, y: 69.42))
        bezierPath.addLine(to: CGPoint(x: 372.51, y: 69.42))
        bezierPath.addLine(to: CGPoint(x: 355.91, y: 468.43))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        
        
        
        //// Group 3
        
        
        //// Group 4
        
        
        //// Group 5
        
        
        //// Group 6
        
        
        //// Group 7
        
        
        //// Group 8
        
        
        //// Group 9
        
        
        //// Group 10
        
        
        //// Group 11
        
        
        //// Group 12
        
        
        //// Group 13
        
        
        //// Group 14
        
        
        //// Group 15
        
        
        //// Group 16
        
        
        //// Group 17
        
        context.restoreGState()
        
    }
    
    
    
    
    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
            case .aspectFit:
                scales.width = min(scales.width, scales.height)
                scales.height = scales.width
            case .aspectFill:
                scales.width = max(scales.width, scales.height)
                scales.height = scales.width
            case .stretch:
                break
            case .center:
                scales.width = 1
                scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
